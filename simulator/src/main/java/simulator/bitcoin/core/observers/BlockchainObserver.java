/*
 * Copyright (c) 2018 Davide Pedranz. All rights reserved.
 *
 * This code is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */

package simulator.bitcoin.core.observers;

import peersim.core.CommonState;
import peersim.core.Control;
import peersim.core.Network;
import peersim.util.IncrementalFreq;
import simulator.bitcoin.core.BitcoinCore;

import static peersim.utilities.ConfigurationHelper.readPid;

/**
 * Observer that tracks the structure of the blockchain generated by the protocol.
 */
public final class BlockchainObserver implements Control {

    // fields
    private final String prefix;
    private final int pid;

    /**
     * Default constructor, following the PeerSim conventions.
     * The prefix field is automatically provided by the PeerSim engine.
     *
     * @param prefix Prefix of this control in the configuration file.
     */
    public BlockchainObserver(String prefix) {
        this.prefix = prefix;
        this.pid = readPid(prefix);
    }

    @Override
    public boolean execute() {

        // compute the statistics over all nodes in the network
        // NB: we count the TOTALS, so please divide by the number of nodes in the simulation to get the mean
        final IncrementalFreq stats = new IncrementalFreq();
        for (int i = 0; i < Network.size(); i++) {
            final BitcoinCore protocol = (BitcoinCore) Network.get(i).getProtocol(pid);
            final int[] values = protocol.getBlockchain().forksLengths();
            for (int value : values) {
                stats.add(value);
            }
        }

        // print them out, following PeerSim conventions
        System.out.println(prefix + ": [" + CommonState.getTime() + "] " + stats);

        // false == do NOT stop the simulation
        return false;
    }
}
