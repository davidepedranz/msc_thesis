package simulator.bitcoin.core.observers;

import peersim.core.CommonState;
import peersim.core.Control;
import peersim.util.IncrementalFreq;
import simulator.bitcoin.core.model.Blockchain;
import simulator.bitcoin.core.model.Blocks;

/**
 * Observer that tracks the structure of the blockchain generated by the protocol.
 * Differently from {@link BlockchainObserver} that checks the blockchain status from
 * the nodes of the protocol, we keep the global status of the blockchain here, i.e.
 * we keep track of every valid block generated during the simulation by any node,
 * even if the block has not been yet propagated.
 */
public final class GlobalBlockchainObserver implements Control {

	// fields
	private final String name;

	public GlobalBlockchainObserver(String name) {
		this.name = name;
	}

	@Override
	public boolean execute() {

		// take into account ONLY the global state of the simulator
		final IncrementalFreq stats = new IncrementalFreq();
		final Blockchain blockchain = Blocks.globalBlockchain;
		final int[] values = blockchain.forksLengths();
		for (int value : values) {
			stats.add(value);
		}

		// print them out, following Peersim conventions
		System.out.println(name + ": [" + CommonState.getTime() + "] " + stats);

		// false == do NOT stop the simulation
		return false;
	}
}
